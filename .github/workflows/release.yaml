name: release

# on:
#   push:
#     branches:
#       - main
#       - master

on:
  release:
    types: [published]

env:
  # Define image names
  GRPC_IMAGE: ${{ secrets.GRPC_IMAGE }}
  REGISTRY: ghcr.io


jobs:
  config:
    runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
        
      - name: Check output
        run: |
          echo ${{ github.ref_name }}
          echo ${{ github.ref_name }} > version.txt
          
      - name: Upload version file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-deployment
          path: version.txt

  build:
    runs-on: [ubuntu-latest]

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.ACTIONS_CR_TK }}

      - name: Check image version
        env:
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          echo $IMAGE_TAG
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.GRPC_IMAGE }}

      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  ## Generate deployment files.
  generate-artifacts:
    needs: config

    runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
          
      - name: Check image version
        env:
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          echo $IMAGE_TAG
      - name: Generate deployment files
        env:
          IMAGE_TAG: ${{ github.ref_name }}
          PULL_SECRET: ${{ secrets.PULL_SECRET }}
        run: |
          sed -i "s@__IMAGE__@$GRPC_IMAGE@g" k8s/deployment.grpc.yaml
          sed -i "s@__PULL_SECRET__@$PULL_SECRET@g" k8s/deployment.grpc.yaml
          sed -i "s@__IMAGE_TAG__@$IMAGE_TAG@g" k8s/deployment.grpc.yaml
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-deployment
          path: |
            k8s/deployment.grpc.yaml
            k8s/service.grpc.yaml

  deploy:
    needs: [build, generate-artifacts]

    runs-on: [ubuntu-latest]

    steps:
      - name: download deployment files
        uses: actions/download-artifact@v3
        env:
          IMAGE_TAG: ${{ github.ref_name }}
        with:
          name: ${{ github.event.repository.name }}-deployment
          path: ${{ github.ref_name }}
      
      - name: scp to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          source: ${{ github.ref_name }}
          target: ${{ secrets.DEPLOYMENTS_PATH }}
          
      - name : ssh to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            kubectl apply -f ${{secrets.DEPLOYMENTS_PATH}}/${{ github.ref_name }}/deployment.grpc.yaml
            kubectl apply -f ${{secrets.DEPLOYMENTS_PATH}}/${{ github.ref_name }}/service.grpc.yaml
